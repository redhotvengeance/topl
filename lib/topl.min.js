/*!
 * topl (v0.3.0) - a TOML parser for JavaScript
 * Copyright (c) 2014 Ian Lollar (rhv@redhotvengeance.com)
 * Distributed under The MIT License
 * https://github.com/redhotvengeance/topl
 */
(function(){var e,r,t,n,i,a,c,u,l,s,o,f,h,b;u=function(e){return function(r){var n,c,u,l;e.parsed={};e.index=-1;e.line=1;e.currentCharacter="";e.currentObject=e.parsed;e.currentKey="";e.tableKeys=[];c=r.toString().replace(/\r\n/g,"\n").split("\n");c.push("");for(u=0,l=c.length;u<l;u++){n=c[u];n=b(n)}e.text=c.join("\n");while(f()){switch(e.currentCharacter){case" ":f();break;case"#":t();break;case"[":a();break;default:i()}}return e.parsed}}(this);e=function(e){return function(e){throw new Error(e)}}(this);f=function(r){return function(t){if(t&&t!==c()){e("Syntax error on line "+r.line)}if(r.currentCharacter==="\n"){r.line++}r.index++;return r.currentCharacter=r.text.charAt(r.index)}}(this);c=function(e){return function(){return e.text.charAt(e.index+1)}}(this);h=function(e){return function(){var e;if(c()===" "||c()==="	"){e=[];while(f()){if(c()!==" "&&c()!=="	"){break}else{e.push(void 0)}}return e}}}(this);b=function(e){return function(e){return e.replace(/^[\s]+/,"").replace(/[\s]+$/,"")}}(this);t=function(e){return function(){var r;r=[];while(f()){if(e.currentCharacter==="\n"||c()==="\n"){break}else{r.push(void 0)}}return r}}(this);o=function(r){return function(){var t,n,i,a,u,l;a="";if(c()!=='"'){while(f()){if(r.currentCharacter==="\\"){f();if(r.currentCharacter==="u"){u=0;for(i=l=1;l<=4;i=++l){n=parseInt(f(),16);if(!isFinite(n)){break}u=u*16+n}a+=String.fromCharCode(u)}else{t="";switch(r.currentCharacter){case"b":t="\b";break;case"t":t="	";break;case"n":t="\n";break;case"f":t="\f";break;case"r":t="\r";break;case'"':t='"';break;case"/":t="/";break;case"\\":t="\\";break;default:e("Whatever you're trying to escape on line "+r.line+" isn't supported. Try adding it in Unicode (\\uXXXX).")}a+=t}}else{a+=r.currentCharacter}if(c()==='"'){break}}}f();return{type:"string",value:a}}}(this);s=function(r){return function(){var t,n,i;t=r.currentCharacter;if(/[.Z:T\d-]/.test(c())){while(f()){t+=r.currentCharacter;if(!/[.Z:T\d-]/.test(c())){break}}}if(/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})Z$/.test(t)){i="date";n=new Date(t)}else if(/^-?(\d+)?\.\d+$/.test(t)){i="float";n=parseFloat(t)}else if(/^-?\d+$/.test(t)){i="integer";n=parseInt(t)}else{e("Invalid primitive type on line "+r.line)}return{type:i,value:n}}}(this);l=function(r){return function(){var t;switch(r.currentCharacter.toLowerCase()){case"t":f("r");f("u");f("e");t=true;break;case"f":f("a");f("l");f("s");f("e");t=false;break;default:e("Invalid primitive type on line "+r.line)}return{type:"boolean",value:t}}}(this);n=function(t){return function(){var n,i,a;n=[];i=null;h();while(f()){a=r();if(a){if(!i){i=a.type}if(a.type!==i){e("Array on line "+t.line+" is mixing data types! That is a TOML no-no.")}n.push(a.value);h();f()}if(t.currentCharacter===","||t.currentCharacter==="\n"){h()}else if(t.currentCharacter==="]"){break}}return{type:"array",value:n}}}(this);a=function(r){return function(){var t,n,i,a,u,l,s,o,p,d,y,k;h();f();t=false;if(r.currentCharacter==="["){t=true;h();f()}i=r.currentCharacter;if(c()!=="]"){while(f()){if(r.currentCharacter!=="["&&r.currentCharacter!=="#"){i+=r.currentCharacter}else{e("Improper table declaration on line "+r.line)}if(c()==="]"){break}}}f();h();i=b(i);if(t){f();h()}if(c()!=="\n"&&c()!=="#"){e("Improper table declaration on line "+r.line)}l=i.split(".");r.currentObject=r.parsed;for(n=o=0,d=l.length;o<d;n=++o){u=l[n];u=b(u);a=false;if(u.length<=0){e("Improper table declaration on line "+r.line)}if(n===l.length-1){a=true}if(r.currentObject[u]==null){if(t&&a){r.currentObject[u]=[{}];r.currentObject=r.currentObject[u][0]}else{r.currentObject[u]={};r.currentObject=r.currentObject[u]}}else{if(t){if(a){if(!Array.isArray(r.currentObject[u])){e("Check your tables and keys! You're attempting an overwrite on line "+r.line+"!")}r.currentObject[u].push({});r.currentObject=r.currentObject[u][r.currentObject[u].length-1]}else{if(Array.isArray(r.currentObject[u])){r.currentObject=r.currentObject[u][r.currentObject[u].length-1]}else{r.currentObject=r.currentObject[u]}}}else{k=r.tableKeys;for(p=0,y=k.length;p<y;p++){s=k[p];if(s===i){e("Check your tables and keys! You're attempting an overwrite on line "+r.line+"!")}}r.currentObject=r.currentObject[u];if(Array.isArray(r.currentObject)){r.currentObject=r.currentObject[r.currentObject.length-1]}}}}r.tableKeys.push(i);return r.currentKey=i}}(this);i=function(t){return function(){var n,i;if(/[\w~!@#$^&*()_+-`1234567890\[\]\\|\/?><.,;:']/i.test(t.currentCharacter)){n=t.currentCharacter;if(c()!=="="){while(f()){n+=t.currentCharacter;if(c()==="="){break}}}h();n=b(n);if(f()==="="){h();f();i=r()}if(!i){e("Syntax error on line "+t.line)}if(t.currentObject[n]!=null){e("Trying to overwrite previously set value on line "+t.line)}t.currentObject[n]=i.value;t.tableKeys.push(""+t.currentKey+"."+n);h();if(c()!=="\n"&&c()!=="#"){return e("Syntax error on line "+t.line)}}}}(this);r=function(r){return function(){var i,a;i=null;switch(r.currentCharacter){case"#":t();break;case'"':i=o();break;case"'":e("Check the string on line "+r.line+"! TOML does not support single-quoted strings.");break;case"[":i=n();break;case"-":i=s();break;case"]":break;case"\n":h();break;default:if("0"<=(a=r.currentCharacter)&&a<="9"){i=s()}else{i=l();if(i===null){e("Invalid primitive type on line "+r.line)}}}return i}}(this);if(typeof Array.isArray==="undefined"){Array.isArray=function(e){return Object.toString.call(e)==="[object] Array"}}if(typeof exports!=="undefined"&&exports!==null){exports.parse=u}else{this["topl"]={};this["topl"]["parse"]=u}}).call(this);