/*!
 * topl (v0.2.0) - a TOML parser for JavaScript
 * Copyright (c) 2014 Ian Lollar (rhv@redhotvengeance.com)
 * Distributed under The MIT License
 * https://github.com/redhotvengeance/topl
 */
(function(){var e,r,t,n,a,i,c,u,s,l,f,o,h,b;u=function(e){return function(r){var n,c,u,s;e.parsed={};e.index=-1;e.line=1;e.currentCharacter="";e.currentObject=e.parsed;e.currentKey="";e.tableKeys=[];c=r.toString().replace(/\r\n/g,"\n").split("\n");c.push("");for(u=0,s=c.length;u<s;u++){n=c[u];n=b(n)}e.text=c.join("\n");while(o()){switch(e.currentCharacter){case" ":o();break;case"#":t();break;case"[":i();break;default:a()}}return e.parsed}}(this);e=function(e){return function(e){throw new Error(e)}}(this);o=function(r){return function(t){if(t&&t!==c()){e("Syntax error on line "+r.line)}if(r.currentCharacter==="\n"){r.line++}r.index++;return r.currentCharacter=r.text.charAt(r.index)}}(this);c=function(e){return function(){return e.text.charAt(e.index+1)}}(this);h=function(e){return function(){var e;if(c()===" "||c()==="	"){e=[];while(o()){if(c()!==" "&&c()!=="	"){break}else{e.push(void 0)}}return e}}}(this);b=function(e){return function(e){return e.replace(/^[\s]+/,"").replace(/[\s]+$/,"")}}(this);t=function(e){return function(){var r;r=[];while(o()){if(e.currentCharacter==="\n"||c()==="\n"){break}else{r.push(void 0)}}return r}}(this);f=function(r){return function(){var t,n,a,i,u,s;i="";if(c()!=='"'){while(o()){if(r.currentCharacter==="\\"){o();if(r.currentCharacter==="u"){u=0;for(a=s=1;s<=4;a=++s){n=parseInt(o(),16);if(!isFinite(n)){break}u=u*16+n}i+=String.fromCharCode(u)}else{t="";switch(r.currentCharacter){case"b":t="\b";break;case"t":t="	";break;case"n":t="\n";break;case"f":t="\f";break;case"r":t="\r";break;case'"':t='"';break;case"/":t="/";break;case"\\":t="\\";break;default:e("Whatever you're trying to escape on line "+r.line+" isn't supported. Try adding it in Unicode (\\uXXXX).")}i+=t}}else{i+=r.currentCharacter}if(c()==='"'){break}}}o();return{type:"string",value:i}}}(this);l=function(r){return function(){var t,n,a;t=r.currentCharacter;if(/[.Z:T\d-]/.test(c())){while(o()){t+=r.currentCharacter;if(!/[.Z:T\d-]/.test(c())){break}}}if(/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})Z$/.test(t)){a="date";n=new Date(t)}else if(/^-?(\d+)?\.?\d+$/.test(t)){a="float";n=parseFloat(t)}else if(/^-?\d+$/.test(t)){a="integer";n=parseInt(t)}else{e("Invalid primitive type on line "+r.line)}return{type:a,value:n}}}(this);s=function(r){return function(){var t;switch(r.currentCharacter.toLowerCase()){case"t":o("r");o("u");o("e");t=true;break;case"f":o("a");o("l");o("s");o("e");t=false;break;default:e("Invalid primitive type on line "+r.line)}return{type:"boolean",value:t}}}(this);n=function(t){return function(){var n,a,i;n=[];a=null;h();while(o()){i=r();if(i){if(!a){a=i.type}if(i.type!==a){e("Array on line "+t.line+" is mixing data types! That is a TOML no-no.")}n.push(i.value);h();o()}if(t.currentCharacter===","||t.currentCharacter==="\n"){h()}else if(t.currentCharacter==="]"){break}}return{type:"array",value:n}}}(this);i=function(r){return function(){var t,n,a,i,u,s,l,f,b,p,d;h();o();t=false;if(r.currentCharacter==="["){t=true;h();o()}a=r.currentCharacter;if(c()!==" "&&c()!=="	"&&c()!=="]"){while(o()){a+=r.currentCharacter;if(c()===" "||c()==="	"||c()==="]"){break}}}o();h();if(t){o();h()}if(c()!=="\n"&&c()!=="#"){e("Improper table declaration on line "+r.line)}u=a.split(".");r.currentObject=r.parsed;for(n=l=0,b=u.length;l<b;n=++l){i=u[n];if(r.currentObject[i]==null){if(t){r.currentObject[i]=[{}];r.currentObject=r.currentObject[i][0]}else{r.currentObject[i]={};r.currentObject=r.currentObject[i]}}else{if(n===u.length-1){if(t){r.currentObject[i].push({});r.currentObject=r.currentObject[i][r.currentObject[i].length-1]}else{d=r.tableKeys;for(f=0,p=d.length;f<p;f++){s=d[f];if(s===a){throw new Error("Check your tables and keys! You're attempting an overwrite on line "+r.line+"!")}}}}else{r.currentObject=r.currentObject[i];if(Array.isArray(r.currentObject)){r.currentObject=r.currentObject[r.currentObject.length-1]}}}}r.tableKeys.push(a);return r.currentKey=a}}(this);a=function(t){return function(){var n,a;if(/\w/i.test(t.currentCharacter)){n=t.currentCharacter;if(c()!==" "&&c()!=="	"&&c()!=="="){while(o()){n+=t.currentCharacter;if(c()===" "||c()==="	"||c()==="="){break}}}h();if(o()==="="){h();o();a=r()}if(!a){e("Syntax error on line "+t.line)}t.currentObject[n]=a.value;t.tableKeys.push(""+t.currentKey+"."+n);h();if(c()!=="\n"&&c()!=="#"){return e("Syntax error on line "+t.line)}}}}(this);r=function(r){return function(){var a,i;a=null;switch(r.currentCharacter){case"#":t();break;case'"':a=f();break;case"'":e("Check the string on line "+r.line+"! TOML does not support single-quoted strings.");break;case"[":a=n();break;case"-":a=l();break;case"]":break;case"\n":h();break;default:if("0"<=(i=r.currentCharacter)&&i<="9"){a=l()}else{a=s();if(a===null){e("Invalid primitive type on line "+r.line)}}}return a}}(this);if(typeof Array.isArray==="undefined"){Array.isArray=function(e){return Object.toString.call(e)==="[object] Array"}}if(typeof exports!=="undefined"&&exports!==null){exports.parse=u}else{this["topl"]={};this["topl"]["parse"]=u}}).call(this);